from src.impl.di_graph import DiGraph
from src.impl.graph_algo import GraphAlgo
import unittest


class GraphAlgoTest(unittest.TestCase):

    def test_shortest_path_test(self):
        g = DiGraph()
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_node(4)
        g.add_node(5)
        g.add_node(6)
        g.add_edge(1, 2, 2)
        g.add_edge(1, 3, 4)
        g.add_edge(2, 4, 7)
        g.add_edge(2, 3, 1)
        g.add_edge(3, 5, 3)
        g.add_edge(5, 4, 2)
        g.add_edge(4, 6, 1)
        g.add_edge(5, 6, 6)
        g_a = GraphAlgo(g)
        s = g_a.shortest_path(1, 5)
        self.assertEqual((6, [1, 2, 3, 5]), s)

    def test_save_load(self):
        g = DiGraph()
        g.add_node(1, (42.4, 32.3, 0))
        g.add_node(2, (41.4, 34.3, 0))
        g.add_node(3, (42, 33, 0))
        g.add_node(4, (41.4, 32.3, 0))
        g.add_edge(1, 2, 3)
        g.add_edge(1, 3, 2)
        g.add_edge(2, 3, 1)
        g.add_edge(4, 1, 6)
        g_a1 = GraphAlgo(g)
        g_a1.save_to_json("../data/graph.json")
        g_a2 = GraphAlgo()
        g_a2.load_from_json("../data/graph.json")
        g2 = g_a2.get_graph()
        self.assertIsNotNone(g2)
        self.assertEqual(4, g2.e_size())
        g2.add_node(6, (23, 21.2, 0))
        self.assertNotEqual(g2.v_size(), g.v_size())

    def test_TSP(self):
        g = DiGraph()
        g.add_node(1, (42.4, 32.3, 0))
        g.add_node(2, (41.4, 34.3, 0))
        g.add_node(3, (42, 33, 0))
        g.add_node(4, (41.4, 32.3, 0))
        g.add_edge(1, 2, 20)
        g.add_edge(1, 3, 11)
        g.add_edge(2, 3, 3)
        g.add_edge(2, 4, 2)
        g.add_edge(3, 4, 5)
        g.add_edge(3, 1, 12)
        g.add_edge(4, 1, 7)
        g.add_edge(4, 2, 1)
        print(g.all_out_edges_of_node(1))
        print(g.all_out_edges_of_node(2))
        print(g.all_out_edges_of_node(3))
        print(g.all_out_edges_of_node(4))
        g_a = GraphAlgo(g)
        self.assertEqual(g_a.TSP([1, 2, 3, 4])[1], 17)
        self.assertEqual(g_a.TSP([1, 2, 3, 4])[0], [1, 3, 4, 2])

    def test_dijkstra(self):
        algo = GraphAlgo()
        algo.load_from_json('../../data/A0.json')
        algo.get_graph().add_node(0)
        algo.get_graph().add_node(1)
        algo.get_graph().add_node(2)
        algo.get_graph().add_edge(0, 1, 1)
        algo.get_graph().add_edge(1, 2, 4)
        self.assertEqual(algo.shortest_path(0, 2), (5, [0, 1, 2]))
        self.assertEqual(algo.shortest_path(0, 1), (1, [0, 1]))

    def test_center(self):
        algo = GraphAlgo()
        algo.load_from_json('../../data/A0.json')
        center = algo.centerPoint()
        self.assertEqual((7, 6.806805834715163), center)
